@model ListOfCompanies.WEB.Models.CompanyViewModel

<style>
    body {
        padding-top: 10px;
    }
</style>

@Styles.Render("~/Content/jquicss")
@Styles.Render("~/Content/jqgridcss")

@section Header
{
    <div class="text-center">
        <h2>@ViewBag.Title</h2>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger", @id = "idValidationForm" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "idCompanyName" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", @id = "idCompanyCountry" } })
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="submitFormCompany()" value="Сохранить/редактировать компанию" class="btn btn-primary" />

                <input type="submit" id="idFormSubmit" class="hidden"
                       formaction="@Url.Action("Edit_CreateCompanyConfirm","Home",new {Page = ViewBag.Page,
    SortByname = ViewBag.SortByname, SortBycountry = ViewBag.SortBycountry, IncludesAdmins = ViewBag.IncludesAdmins,
    SearchByName = ViewBag.SearchByName, ID=Model.ID })" formmethod="post" />
            </div>
        </div>
    </div>
}

<hr />

@*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////*@
@if (Model.ID.ToString() != "00000000-0000-0000-0000-000000000000")
{
    <table id="jqgEndUser"></table>
    <div id="jpager"></div>
    <hr />
    <table id="jqgAdminUser"></table>
    <div id="jpagerA"></div>
}
else
{
    <h3>
        Для добавления пользователей необходимо создать компанию
    </h3>
}
@*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////*@

<div class="text-center">
    @if (ViewBag.Page != 1 || ViewBag.SortByname != null || ViewBag.SortBycountry != null || ViewBag.IncludesAdmins != false ||
                                                                        ViewBag.SearchByName != null)
    {
        @Html.ActionLink("Вернуться на активную страницу ", "Index", new
   {
       Page = ViewBag.Page,
       SortByname = ViewBag.SortByname,
       SortBycountry = ViewBag.SortBycountry,
       IncludesAdmins = ViewBag.IncludesAdmins,
       SearchByName = ViewBag.SearchByName
   })
        <span>|</span>
    }
    @Html.ActionLink("На главную", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jquery-ui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqgrid")

    <script type="text/javascript">

        function submitFormCompany() {
            if ($("#idCompanyName").val() === '@Model.Name' && $("#idCompanyCountry").val() === '@Model.Country') {
                $("#idValidationForm").empty();
                $("#idValidationForm").append("<ul><li>Компания не изменена</li></ul>");
            }
            else
                $("#idFormSubmit").click();
        };

        $(document).ready(function () {
            $.extend(true, $.jgrid.edit, {
                //beforeInitData: function () {
                //    $("#editmodjqgEndUser" + this.id).remove();
                //},
                onInitializeForm: function ($form) {
                    $form.css({ height: "auto", width: "auto" });
                    $form.closest(".ui-jqdialog").css({ height: "auto", width: "auto" });
                },
                width: "auto"
            });

            function checkLoginEndUser(idCurrent) {
                var message = "";
                var mydata = $("#jqgEndUser").jqGrid('getGridParam', 'data');
                // var logins = $("#jqgEndUser").jqGrid('getCol', 'Login', false);
                for (var i in mydata) {
                    if ($("#Login").val() === mydata[i].Login && idCurrent !== mydata[i].ID) {
                        message += "Пользователь с логином \"" + mydata[i].Login + "\" уже зарегистрирован";
                        break;
                    }
                }
                if (message === "")
                    return [true];
                return [false, message];
            };

            $.datepicker.setDefaults($.datepicker.regional['ru']);

            var datemin = new Date(1940, 0, 1);

            var date = new Date();
            var datemax = new Date(date.getFullYear() - 18, 11, 31);

            $("#jqgEndUser").jqGrid({
                url: '@Url.Action("GetEndUsersCompany", "UsersCompany", new { IdCompany = Model.ID })',
                //editurl: 'clientArray', ////////////////////////////////////
                mtype: "GET",
                datatype: "json",
                colModel: [
            { label: 'ID', name: 'ID', stype: 'text', key: true, hidden: true, editable: false },
            {
                label: 'Логин', name: 'Login', sortable: true, editable: true, edittype: 'text',
                editoptions: { placeholder: "Введите логин" },
                editrules: { required: true, email: true }// ////////////////////////////////////
            },
            {
                label: 'Должность', name: 'Position', sortable: true, editable: true, edittype: 'select',
                editoptions: { value: { "": "", "director": "director", "manager": "manager", "programmer": "programmer", "booker": "booker" } },
                editrules: { required: true }// ///////////////////////////////////////
            },
            {
                label: 'День рождения', name: 'DateOfBirth', formatter: 'date', sortable: true, editable: true, width: 50, edittype: 'button',
                formatoptions: { newformat: 'd.m.Y' },
                editoptions: {
                    placeholder: "Введите дату рождения d.m.Y",
                    dataInit: function (element) {
                        $(element).datepicker({
                            id: 'DateOfBirth_datePicker',
                            dateFormat: 'dd.mm.yy',
                            changeMonth: true,
                            changeYear: true,
                            minDate: datemin,
                            maxDate: datemax,
                            showOn: 'focus',
                            yearRange: (datemin.getFullYear() + ":" + datemax.getFullYear())
                        });
                    }
                },
                editrules: { required: true, date: true }
            },
            {
                label: 'Управляющий', name: 'IsManager', formatter: 'checkbox', sortable: true, editable: true, edittype: 'checkbox', width: 50,
                editoptions: { value: "True:False" }
            }
                ],
                width: $('body').innerWidth() - 50,
                pager: '#jpager',
                loadonce: true,
                caption: "Конечные пользователи",
                rowNum: 10,
                scroll: 1,
                viewrecords: true,
                emptyrecords: 'Таблица пуста'
            });

            $("#jqgEndUser").jqGrid('navGrid', '#jpager', {
                add: true,
                // addtext:"Добавить",
                del: true,
                edit: true,
                search: true,
                //   searchtext: "Поиск",
                refresh: true,
                //   refreshtext: "Обновить"
            },
                   {
                       viewPagerButtons: false,
                       mtype: "POST",
                       url: '@Url.Action("EditEndUsers", "UsersCompany")',
                       closeAfterEdit: true,
                       recreateForm: true,
                       resize: false,

                       beforeSubmit: function () {
                           var idCurrent = $("#id_g").val();
                           return checkLoginEndUser(idCurrent);
                       },

                       afterSubmit: function (response) {
                           var data = JSON.parse(response.responseText);
                           if (data.ID !== undefined) {
                               var date = new Date(Date.parse(data.DateOfBirth));
                               $("#jqgEndUser").setCell(data.ID, 'Login', data.Login);
                               $("#jqgEndUser").setCell(data.ID, 'Position', data.Position);
                               $("#jqgEndUser").setCell(data.ID, 'DateOfBirth', date);
                               $("#jqgEndUser").setCell(data.ID, 'IsManager', data.IsManager);

                               return [true];
                           }
                           return [false, data];
                       }

                   },
        {
            mtype: "POST",
            url: '@Url.Action("CreateEndUsers", "UsersCompany", new { IdCompany = Model.ID })',
            resize: false,
            closeAfterAdd: true,
            recreateForm: true,

            beforeSubmit: function () {
                return checkLoginEndUser();
            },

            afterSubmit: function (response) {
                var data = JSON.parse(response.responseText);
                if (data.ID !== undefined) {
                    var mydataadd = [{
                        ID: data.ID, Login: data.Login, Position: data.Position, DateOfBirth: data.DateOfBirth,
                        IsManager: data.IsManager
                    }];
                    $("#jqgEndUser").addRowData("ID", mydataadd);
                    return [true];
                }
                return [false, data];
            }
        },
        {
            mtype: "POST",
            url: '@Url.Action("DeleteEndUsers", "UsersCompany")',
            closeAfterDelete: true,
            recreateForm: true,
            resize: false,
            msg: "Вы хотите удалить этого пользователя? ",

            afterSubmit: function (response) {
                if (response === "False")
                    return [false, "Произошла ошибка. Обновите страницу"];
                return [true];
            }
        }
        );
            ///////////////////////////////////////////////////////////////////////////////////////////
            $("#jqgAdminUser").jqGrid({
                url: '@Url.Action("GetAdminUsersCompany", "UsersCompany", new { IdCompany = Model.ID })',
                mtype: "GET",
                datatype: "json",
                colModel: [
            { label: 'ID', name: 'ID', stype: 'text', key: true, hidden: true, editable: false },
            {
                label: 'Логин', name: 'Login', sortable: true, editable: true, edittype: 'text',
                editoptions: { placeholder: "Введите логин" },
                editrules: { required: true, email: true }// ////////////////////////////////////
            },
            {
                label: 'Должность', name: 'Position', sortable: true, editable: true, edittype: 'select',
                editoptions: { value: { "": "", "director": "director", "manager": "manager", "programmer": "programmer", "booker": "booker" } },
                editrules: { required: true }// ///////////////////////////////////////
            },
            {
                label: 'День рождения', name: 'DateOfBirth', formatter: 'date', sortable: true, editable: true, width: 50, edittype: 'button',
                formatoptions: { newformat: 'd.m.Y' },
                editoptions: {
                    placeholder: "Введите дату рождения d.m.Y",
                    dataInit: function (element) {
                        $(element).datepicker({
                            id: 'DateOfBirth_datePicker',
                            dateFormat: 'dd.mm.yy',
                            changeMonth: true,
                            changeYear: true,
                            minDate: datemin,
                            maxDate: datemax,
                            showOn: 'focus',
                            yearRange: (datemin.getFullYear() + ":" + datemax.getFullYear())
                        });
                    }
                },
                editrules: { required: true, date: true }
            },
            {
                label: 'Активный', name: 'IsActive', formatter: 'checkbox', sortable: true, editable: true, edittype: 'checkbox', width: 50,
                editoptions: { value: "True:False" }
            }
                ],
                width: $('body').innerWidth() - 32,
                pager: '#jpagerA',
                loadonce: true,
                caption: "Администраторы",
                rowNum: 10,
                scroll: 1,
                viewrecords: true,
                emptyrecords: 'Таблица пуста'
            });

            $("#jqgAdminUser").jqGrid('navGrid', '#jpagerA', {
                add: true,
                del: true,
                edit: true,
                search: true,
                refresh: true,
            },
                               {
                                   viewPagerButtons: false,
                                   mtype: "POST",
                                   url: '@Url.Action("EditAdminUsers", "UsersCompany")',
                                   closeAfterEdit: true,
                                   recreateForm: true,
                                   resize: false,

                                   beforeSubmit: function () {
                                       return checkLoginEndUser();
                                   },

                                   afterSubmit: function (response) {
                                       var data = JSON.parse(response.responseText);
                                       if (data.ID !== undefined) {
                                           var mydataadd = [{
                                               ID: data.ID, Login: data.Login, Position: data.Position, DateOfBirth: data.DateOfBirth,
                                               IsActive: data.IsActive
                                           }];

                                           $("#jqgAdminUser").setCell(data.ID, 'Login', data.Login);
                                           $("#jqgAdminUser").setCell(data.ID, 'Position', data.Position);
                                           $("#jqgAdminUser").setCell(data.ID, 'DateOfBirth', data.DateOfBirth);
                                           $("#jqgAdminUser").setCell(data.ID, 'IsActive', data.IsActive);

                                           return [true];
                                       }
                                       return [false, data];
                                   }
                               },
{
    mtype: "POST",
    url: '@Url.Action("CreateEndUsers", "UsersCompany", new { IdCompany = Model.ID })',
    resize: false,
    closeAfterAdd: true,
    recreateForm: true,

    beforeSubmit: function () {
        return checkLoginEndUser();
    },

    afterSubmit: function (response) {
        var data = JSON.parse(response.responseText);
        if (data.ID !== undefined) {
            var mydataadd = [{
                ID: data.ID, Login: data.Login, Position: data.Position, DateOfBirth: data.DateOfBirth,
                IsManager: data.IsManager
            }];
            $("#jqgEndUser").addRowData("ID", mydataadd);
            return [true];
        }
        return [false, data];
    }
},
{
    mtype: "POST",
    url: '@Url.Action("DeleteAdminUsersInCompany", "UsersCompany", new { IdCompany = Model.ID })',
    closeAfterDelete: true,
    recreateForm: true,
    resize: false,
    msg: "Вы хотите удалить этого пользователя <br/>(только из этой компании)? ",

    afterSubmit: function (response) {
        if (response === "False")
            return [false, "Произошла ошибка. Обновите страницу"];
        return [true];
    }
}
);

        });//(document).ready
    </script>
}
